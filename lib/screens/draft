import 'package:flutter/material.dart';
import 'package:litter_star/data/video_list.dart';
import 'package:litter_star/utils/get_hex_color.dart';
import 'package:litter_star/utils/globals.dart';
import 'package:litter_star/utils/layouts.dart';
import 'package:litter_star/utils/sounds.dart';
import 'package:litter_star/widgets/btn_with_bg_img.dart';
import 'package:get/get.dart';
import 'package:litter_star/widgets/video_item.dart';
import 'package:simple_ripple_animation/simple_ripple_animation.dart';
import 'package:speech_to_text/speech_recognition_result.dart';
import 'package:speech_to_text/speech_to_text.dart';

class FairyTaleBinding implements Bindings {
  @override
  void dependencies() {
    Get.lazyPut(() => FairyTaleController());
  }
}

class FairyTaleScreen extends GetView<FairyTaleController> {
  const FairyTaleScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final size = Layouts.getSize(context);

    return Scaffold(
      body: Stack(children: [
        Container(
          decoration: const BoxDecoration(
            image: DecorationImage(
              image: AssetImage("assets/images/fairy_tales_background.png"),
              fit: BoxFit.cover,
            ),
          ),
          child: Obx(
            () => Column(
              children: <Widget>[
                /// Header
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 5),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      BtnWithBG(
                          onPressed: () => Get.back(),
                          bgName: "back_button.png",
                          text: "",
                          height: 50,
                          width: size.width * 0.12),

                      /// Search Bar
                      SizedBox(
                        width: size.width * 0.8,
                        height: 45,
                        child: Material(
                          elevation: 5,
                          borderRadius: BorderRadius.circular(20.0),
                          child: TextFormField(
                            validator: controller.validator,
                            controller: controller.searchController,
                            keyboardType: TextInputType.text,
                            textInputAction: TextInputAction.search,
                            onFieldSubmitted: (value) {
                              controller.searchVideo(value);
                            },
                            decoration: InputDecoration(
                              isCollapsed: true,
                              contentPadding: const EdgeInsets.symmetric(
                                  horizontal: 15, vertical: 2),

                              /// add suffix
                              suffix: IconButton(
                                onPressed: () {
                                  controller.searchController.clear();
                                },
                                icon: const Icon(
                                  Icons.cancel_outlined,
                                  color: Colors.grey,
                                  size: 16,
                                ),
                              ),
                              suffixIcon: InkWell(
                                child: Container(
                                  width: size.width * 0.1,
                                  decoration: BoxDecoration(
                                    color: HexColor("#fbc10e"),
                                    borderRadius: const BorderRadius.horizontal(
                                        right: Radius.circular(20)),
                                  ),
                                  child: const Icon(
                                    Icons.mic,
                                    color: Colors.white,
                                  ),
                                ),
                                onTap: controller._speechToText.isNotListening
                                    ? controller._startListening
                                    : controller._stopListening,
                              ),

                              /// style boder
                              border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(20.0),
                                  borderSide: BorderSide.none),
                              focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(20.0),
                                  borderSide: BorderSide(
                                      color: Colors.yellow.shade700, width: 3)),
                              hintText: 'Tìm kiếm',
                              hintStyle: const TextStyle(
                                  color: Color.fromARGB(255, 200, 202, 202),
                                  fontWeight: FontWeight.bold),
                            ),

                            /// style text input
                            style: const TextStyle(fontSize: 18),
                            maxLines: 1,
                          ),
                        ),
                      ),

                      /// End Search bar
                      ///
                    ],
                  ),
                ),

                /// Show List Video
                Expanded(
                  child: Center(
                    child: SingleChildScrollView(
                      scrollDirection: Axis.vertical,
                      child: Wrap(
                        spacing: 5,
                        direction: Axis.horizontal,
                        children: [
                          if (controller.videosShowed.isNotEmpty)
                            for (var item in controller.videosShowed)
                              VideoItem(video: item)
                          else
                            Center(
                              child: Text(
                                "Không tìm thấy truyện cổ tích nào với từ khoá\n'${controller.searchController.text}'\nVui lòng tìm kiếm lại!",
                                textAlign: TextAlign.center,
                                style: const TextStyle(
                                    backgroundColor: Colors.white,
                                    color: Colors.black,
                                    decoration: TextDecoration.none,
                                    fontSize: 45),
                              ),
                            )
                        ],
                      ),
                    ),
                  ),
                )
              ],
            ),
          ),
        ),
        Visibility(
          visible: false, // TODO: need update
          child: Padding(
            padding: EdgeInsets.only(top: size.height * 0.15),
            child: Container(
              width: double.infinity,
              color: Colors.black54,
            ),
          ),
        )
      ]),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      floatingActionButton: Visibility(
        visible: controller._speechToText.isListening,
        child: RippleAnimation(
          repeat: true,
          color: Colors.blue,
          minRadius: 30,
          ripplesCount: 3,
          child: FloatingActionButton(
              enableFeedback: false,
              onPressed: () {},
              child: const Icon(Icons.mic_none_outlined)),
        ),
      ),
    );
  }
}

class FairyTaleController extends GetxController {
  ///control search video by text
  final searchController = TextEditingController();
  final originVideoList = VideoList.getVideoList();
  var videosShowed = VideoList.getVideoList().obs;

  ///control search video by voice
  final SpeechToText _speechToText = SpeechToText();
  bool _speechEnabled = false;
  String _lastWords = '';

  void _initSpeech() async {
    _speechEnabled = await _speechToText.initialize();
  }

  void _startListening() async {
    await _speechToText.listen(onResult: _onSpeechResult, localeId: "vi_VN");
  }

  void _stopListening() async {
    await _speechToText.stop();
  }

  void _onSpeechResult(SpeechRecognitionResult result) {
    _lastWords = result.recognizedWords;
    searchVideo(_lastWords);
  }

  @override
  void onInit() {
    searchController.text = '';
    if (hasSound.value) {
      Sounds.pauseBackgroundSound();
    }
    _initSpeech;
    super.onInit();
  }

  @override
  void onClose() async {
    if (hasSound.value) {
      Sounds.resumeBackgroundSound();
    }
    searchController.dispose();
    super.onClose();
  }

  String? validator(String? value) {
    if (value!.isEmpty) {
      return 'Bạn phải nhập nội dung muốn tìm kiếm';
    }
    return null;
  }

  Future<void> searchVideo(String text) async {
    videosShowed.value = (originVideoList.where((video) =>
            video.name.toLowerCase().contains(text.toLowerCase()) == true))
        .toList();
  }
}
